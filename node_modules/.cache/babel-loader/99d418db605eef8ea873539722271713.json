{"ast":null,"code":"var _jsxFileName = \"/Users/elliotgolden/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Deck/StudyCard.js\";\nimport React, { useState } from \"react\";\nimport { useHistory, Link, useParams } from \"react-router-dom\";\nimport { PropTypes } from \"prop-types\";\nexport default function StudyCard({\n  cards\n}) {\n  const initialState = {\n    flipped: false,\n    currentCard: 0\n  };\n  const [session, setSession] = useState(initialState);\n  const history = useHistory();\n  const {\n    deckId\n  } = useParams(); // loop through the cards prop and prompt after last card\n\n  const handleNext = () => {\n    if (session.currentCard < cards.length - 1) {\n      setSession({ ...session,\n        currentCard: session.currentCard + 1,\n        flipped: false\n      });\n    } else {\n      window.confirm('Restart cards? \\n \\n \\n Click \"cancel\" to return to the home page.') ? setSession(initialState) : history.push(\"/\");\n    }\n  };\n\n  if (cards.length > 2) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      style: {\n        width: \"32rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }\n    }, \"Card \", session.currentCard + 1, \" of \", cards.length), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"card-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }\n    }, session.flipped ? cards[session.currentCard].back : cards[session.currentCard].front), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-secondary mr-2\",\n      onClick: () => setSession({ ...session,\n        flipped: true\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }, \"Flip\"), session.flipped && /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: handleNext,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 15\n      }\n    }, \"Next\"))));\n  } else {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, \"Not enough cards\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }, \"You need at least 3 cards to study There are \", cards.length, \" cards in this deck\"), /*#__PURE__*/React.createElement(Link, {\n      to: `/decks/${deckId}/cards/new`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"bi bi-plus\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }), \"Add Cards\")));\n  }\n}\nStudyCard.propTypes = {\n  cards: PropTypes.array\n};","map":{"version":3,"sources":["/Users/elliotgolden/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Deck/StudyCard.js"],"names":["React","useState","useHistory","Link","useParams","PropTypes","StudyCard","cards","initialState","flipped","currentCard","session","setSession","history","deckId","handleNext","length","window","confirm","push","width","back","front","propTypes","array"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useHistory, Link, useParams } from \"react-router-dom\";\nimport { PropTypes } from \"prop-types\";\n\nexport default function StudyCard({ cards }) {\n  const initialState = { flipped: false, currentCard: 0 };\n  const [session, setSession] = useState(initialState);\n  const history = useHistory();\n  const { deckId } = useParams();\n\n  // loop through the cards prop and prompt after last card\n  const handleNext = () => {\n    if (session.currentCard < cards.length - 1) {\n      setSession({\n        ...session,\n        currentCard: session.currentCard + 1,\n        flipped: false,\n      });\n    } else {\n      window.confirm(\n        'Restart cards? \\n \\n \\n Click \"cancel\" to return to the home page.'\n      )\n        ? setSession(initialState)\n        : history.push(\"/\");\n    }\n  };\n\n  if (cards.length > 2) {\n    return (\n      <>\n        <div className=\"card\" style={{ width: \"32rem\" }}>\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">\n              Card {session.currentCard + 1} of {cards.length}\n            </h5>\n            <p className=\"card-text\">\n              {session.flipped\n                ? cards[session.currentCard].back\n                : cards[session.currentCard].front}\n            </p>\n            <button\n              className=\"btn btn-secondary mr-2\"\n              onClick={() => setSession({ ...session, flipped: true })}\n            >\n              Flip\n            </button>\n            {session.flipped && (\n              <button className=\"btn btn-primary\" onClick={handleNext}>\n                Next\n              </button>\n            )}\n          </div>\n        </div>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <h2>Not enough cards</h2>\n        <p>\n          You need at least 3 cards to study There are {cards.length} cards in\n          this deck\n        </p>\n        <Link to={`/decks/${deckId}/cards/new`}>\n          <button className=\"btn btn-primary\">\n            <i className='bi bi-plus'></i>Add Cards\n          </button>\n        </Link>\n      </>\n    );\n  }\n}\n\nStudyCard.propTypes = {\n  cards: PropTypes.array,\n};"]},"metadata":{},"sourceType":"module"}